#!/usr/bin/env node
let program = require('commander');
let chalk = require('chalk');
let inquirer = require('inquirer');
var openurl = require('openurl');

let log = require('../src/log');
var tunnel = require('../src/tunnel');

/**
 * Usage.
 */
program
    .option('-p, --port --integer <port>', 'Internal http server port',parseInt)
    .option('-o, --open', 'opens url in your browser',false)
    .option('-l, --local-host', 'Tunnel traffic to this host instead of localhost, override Host header to this host')
    .option('-sï¼Œ --subdomain','Request this subdomain')
    .option('--protocol <protocol>','use http/https protocol, default is http','http');

/**
 * Help.
 */

program.on('--help', function () {
    log.tips('  Examples:');
    log.tips();
    log.tips(chalk.gray('    # create a new project with an official template'));
    log.tips('    $ waka init webpack my-project');
    log.tips();
});

program.parse(process.argv);

// console.log(program.protocol)
if (!program.port ||typeof program.port !== 'number') {
    log.error('port must be a number');
    program.help();
    process.exit(1);
}
if(['http','https'].indexOf(program.protocol)<0){
    log.error('protocol must be http or https');
    program.help();
    process.exit(1);
}
var opt = {
    host: `${!!program.http?'http':'https'}://tunnel.neixin.cn`,
    port: program.port,
    local_host: program['local-host'],
    subdomain: program.subdomain,
};

tunnel(opt.port, opt, function(err, tunnel) {
    if (err) {
        throw err;
    }

    console.log('tunnel url is: %s', tunnel.url);

    if (argv.open) {
        openurl.open(tunnel.url);
    }

    tunnel.on('error', function(err) {
        throw err;
    });
});